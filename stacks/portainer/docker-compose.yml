version: "3.3"

# docker-compose.yml configuration for a Traefik reverse-proxy with dashboard.
#
#  Environment Variables:
#    PORTAINER_VERSION       The version of Portainer to use. defaults to 2.19.0
#    PORTAINER_AGENT_VERSION
#                            The version of Portainer_agent to use. defaults to ${PORTAINER_VERSION}.
#    PORTAINER_INITIAL_PASSWORD_HASH
#                            The initial bcrypt-hashed password of the Portainer 'admin' account to use for
#                            bootstrapping Portainer security. It is meant to be temporary. The first time
#                            you log into Portainer, you will log in with username 'admin' and the password
#                            associated with this hash. At that time, you should immediately change the
#                            password to a durable hard-to-guess password.
#                            After you have changed the password, this value is no longer used, unless
#                            you wipe Portainer state by recreating the 'portainer_data' volume.
#
#                            The value of this string is similar to that produced by `htpasswd`, but does not include
#                            the '<username>:' prefix normally produced by the `htpasswd` command. It can be generated using
#                            `htpasswd -nB admin | sed 's/[^:]*://'` or set with `hub config set-portainer-initial-password`.
#                            This value is sensitive because it can be used for an offline dictionary attack,
#                            and should not be stored in a git repository. It should not be set to a re-used password.
#
#                            Note that this value may contain dollar-signs, so if it is directly inserted
#                            in a docker-compose.yml file, each dollar-sign must be doubled. That is
#                            automatically taken care of when the value is expanded from an environment
#                            variable, as it is here.
#    PORTAINER_DNS_NAME      The fully qualified public DNS domain that the Portainer web UI will run on.
#                            If LAN-only, There must be a DNS entry for this name that resolves to this network's public IP address.}
#    PORTAINER_AGENT_SECRET  A secret string that is shared between portainer and portainer_agent.  This is used to
#                                 authenticate the agent to portainer and vice-versa.
#    PORTAINER_LOG_LEVEL     The log level for Portainer.  One of "DEBUG", "INFO", "WARN", "ERROR", "FATAL", "PANIC"
#    PORTAINER_AGENT_LOG_LEVEL
#                            The log level for Portainer Agent.  One of "DEBUG", "INFO", "WARN", "ERROR", "FATAL", "PANIC"
#
# Entrypoints:
#    This stack uses the following Traefik reverse-proxy entrypoints:
#
#    Entrypoint      Port   Description
#    ----------      ----   ---------------------------------
#    websecure       7082   Public https:// and http:// entrypoint proxied by cloudflare (SSL already terminated)
#                             X-Forwarded-For and X-Forwarded-Proto headers will be filled in to describe originating
#                             request.
#    lanweb            80   Serves HTTP requests for LAN-local clients
#    lanwebsecure     443   Serves HTTPS requests for LAN-local clients. to be used without certificate errors,
#                             A public DNS name must resolve externally to this network's public IP address,
#                             but must resolve within the LAN to this host's LAN IP address. This can be done
#                             by putting the LAN IP address in each client's /etc/hosts, or by hosting
#                             a LAN-local DNS server that overrides the public entries.
#    portainerui     9000   Serves the Portainer UI on LAN-local http://<any-hostname>:9000/portainer.
#
# Externally, this stack serves:
#    https://${PORTAINER_DNS_NAME}          Portainer UI (private LAN only unless configured for public portainer).
#                                           To use on local LAN, Requires a /etc/hosts entry on each client, or a LAN-local DNS server.
#                                           On LAN, a self-signed certificate is used, so the client will need to accept it. On
#                                           the public internet, a valid certificate is provided by cloudflare.
#    http://${PORTAINER_DNS_NAME}           On private LAN, serves portainer UI (requires /etc/hosts entry or local DNS).
#                                           On public Internet, redirected to https:// by cloudflare. 
#    http://<any-host>:9000                 Portainer UI (private LAN only)
#
# Prerequisites:
#   Prerequisites common to all stacks (only done once when traefik is initially set up):
#     * The traefik docker-compose stack has been installed and runs on this host.
#     * A persistent docker volume "portainer_data" has been created before launching. This volume will contain all the
#       persistent state associated with portainer, including its username/password has database and ACL
#       information.  This volume should never be deleted unless you want to wipe portainer.
#
services:
  portainer_agent:
    # A portainer agent that provides access to docker on the local host.
    # also allows docker volumes to be browsed and edited. Only used by
    # portainer
    image: portainer/agent:${PORTAINER_AGENT_VERSION:-${PORTAINER_VERSION:-2.19.0}}
    environment:
      # REQUIRED: Should be equal to the service name prefixed by "tasks." when
      # deployed inside an overlay network
      AGENT_CLUSTER_ADDR: tasks.portainer-agent
      # AGENT_PORT: 9001
      LOG_LEVEL: ${PORTAINER_AGENT_LOG_LEVEL}
      AGENT_SECRET: '${PORTAINER_AGENT_SECRET}'   # allows portainer to authenticate to the agent
    ports:
      # The agent needs to be reachable on port 9001, but only within the stack.
      # So no need to expose.  The agent is added to portainer with the address
      # "portainer_agent: 9001"     
      # - 9001:9001
      []
    volumes:
      - portainer_data:/data                              # Persistent data for the agent
      - /var/run/docker.sock:/var/run/docker.sock         # Allows the agent to control docker on the local host
      - /var/lib/docker/volumes:/var/lib/docker/volumes   # Allows portainer UI browsing of docker volumes (and upload/download)
      - /:/host                                           # Allows portainer UI browsing of entire host filesystem (and upload/download)
    networks:
      - portainer_agent     # allows portainer to see the agent. Nothing else needs access
    restart: always

  portainer:
    image: portainer/portainer-ce:${PORTAINER_VERSION:-2.19.0}
    extends:
      # This deep-merges in the contents of injected-env-vars.yml (which are auto-generated)
      # into this docker-compose.yml.
      file: injected-env-vars.yml
      service: injected_env_vars
    environment:
      # AGENT_PORT: 9001
      LOG_LEVEL: ${PORTAINER_LOG_LEVEL}
      AGENT_SECRET: '${PORTAINER_AGENT_SECRET}'    # allows portainer to authenticate to the agent
    command:
      # Initial password hash for the 'admin' account.  This is a temporary password that is only used
      # on first launch, or when the portainer_data volume is wiped.  It is meant to be changed immediately
      # after first login.  It is not used after that.
      - "--admin-password=${PORTAINER_INITIAL_PASSWORD_HASH:-}"
      - "--base-url=/portainer"                    # move into a subpath so it can share the same domain as other services
    ports:
      - 8000:8000    # SSH tunnel entrypoint; used by edge portainer agents to connect to portainer server
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - traefik           # allows traefik to forward requests to portainer
      - portainer_agent   # allows portainer to connect to the local portainer agent on port 9001
    labels:
      # expose Portainer web UI (port 9000 in the container) behind the traefik reverse-proxy (LAN only) at https://${PORTAINER_DNS_NAME}.
      # The client will need to add a /etc/hosts entry to point ${PORTAINER_DNS_NAME} at this host's LAN IP.
      - "traefik.enable=true"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"     # Port 9000 is reverse-proxied

      # A middleware that will redirect http(s)://<host-and-port>/ to http(s)://<host-and-port>/portainer/
      - "traefik.http.middlewares.portainer-path-redirect.redirectregex.regex=^(https?)://([^/]*)(/?)$$"
      - "traefik.http.middlewares.portainer-path-redirect.redirectregex.replacement=$${1}://$${2}/portainer$${3}"

      # A middleware that will strip the /portainer prefix from the request before forwarding to portainer
      - "traefik.http.middlewares.portainer-stripprefix.stripprefix.prefixes=/portainer"

      # -----------------------------------------
      # A router for https://${PORTAINER_DNS_NAME} in the local LAN entrypoint
      - "traefik.http.routers.portainer-https-shared-private.entrypoints=lanwebsecure"
      - "traefik.http.routers.portainer-https-shared-private.rule=Host(`${PORTAINER_DNS_NAME}`)"
      # Redirect / to /portainer and strip prefix before forwarding to portainer
      - "traefik.http.routers.portainer-https-shared-private.middlewares=portainer-path-redirect,portainer-stripprefix"
      # -----------------------------------------
      # A router for http://${PORTAINER_DNS_NAME} that redirects http to to https, on the local LAN entrypoint
      - "traefik.http.routers.portainer-http.entrypoints=lanweb"
      - "traefik.http.routers.portainer-http.rule=Host(`${PORTAINER_DNS_NAME}`)"
      - "traefik.http.routers.portainer-http.middlewares=portainer-https"
      - "traefik.http.middlewares.portainer-https.redirectscheme.scheme=https"
      # -----------------------------------------
      # A router for http://<any-hostname>:9000
      - "traefik.http.routers.portainer-http-9000.entrypoints=portainerui"
      - "traefik.http.routers.portainer-http-9000.rule=HostRegexp(`{host:.+}`)"   # matches any hostname
      # Redirect / to /portainer and strip prefix before forwarding to portainer
      - "traefik.http.routers.portainer-http-9000.middlewares=portainer-path-redirect,portainer-stripprefix"
      # -----------------------------------------

    restart: always

volumes:
  portainer_data:
    # Persistent data for portainer. Includes sensitive data suct as portainer database, authorized user credential metadata, etc.
    external: true

networks:
  traefik:
    # Traefik's docker network.  Allows traefik to forward HTTP requests to backend services. Any
    # service behind the traefik reverse-proxy must be in at least this network.
    external: true
  portainer_agent:
    # a backend network that allows portainer to connect to the local portainer_agent service. Nothing
    # else needs to connect to it.
