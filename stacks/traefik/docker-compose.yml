version: "3.3"

# docker-compose.yml configuration for a Traefik reverse-proxy with dashboard.
#
#  Environment Variables:
#    TRAEFIK_VERSION         The version of traefik to use. defaults to 2.10.4
#    TRAEFIK_DNS_NAME        The fully qualified public DNS domain that the traefik dashboard will run on.
#                            There must be a DNS entry for this name that resolves to this network's public IP address.
#    TRAEFIK_HTPASSWD         A comma-delimited list of username/hashed password values in the format
#                                 generated by `htpasswd`. The usernames and associated passwords in this
#                                 list will be able to access the Traefik dashboard.
#    TRAEFIK_LOG_LEVEL       The log level for traefik.  One of "DEBUG", "INFO", "WARN", "ERROR", "FATAL", "PANIC"
#    SHARED_APP_DNS_NAME     The fully qualified public DNS domain that the public/private shared apps will run on.
#    SHARED_APP_HTTP_HOST_RULE
#                            The "Host" Traefik rule expression that will match all HTTP hostnames for the shared public
#                                 apps.
#    SHARED_APP_HTTPS_HOST_RULE
#                            The "Host" Traefik rule expression that will match all HTTPS hostnames for the shared public
#                                 apps.
#    SHARED_APP_DEFAULT_PATH
#                            The hostname-relative URL path (e.g., '/whoami') to redirect to for navigations to
#                                the root path of ${SHARED_APP_DNS_NAME}.
#    SHARED_LAN_APP_DNS_NAME 
#                            The fully qualified public DNS domain that the private-only shared apps will run on.
#    SHARED_LAN_APP_HTTP_HOST_RULE
#                            The "Host" Traefik rule expression that will match all HTTP hostnames for the private LAN-only
#                                 apps.
#    SHARED_LAN_APP_HTTPS_HOST_RULE
#                            The "Host" Traefik rule expression that will match all HTTPS hostnames for the private LAN-only
#                                 apps.
#    SHARED_LAN_APP_DEFAULT_PATH
#                            The hostname-relative URL path (e.g., '/whoami') to redirect to for navigations to
#                                the root path of ${SHARED_LAN_APP_DNS_NAME}.
#
# Entrypoints:
#    This stack creates a Traefik reverse-proxy with 5 entrypoints:
#
#    Entrypoint      Port   Description
#    ----------      ----   ---------------------------------
#    websecure       7082   Public https:// and http:// entrypoint proxied by cloudflare (SSL already terminated)
#                             X-Forwarded-For and X-Forwarded-Proto headers will be filled in to describe originating
#                             request.
#    lanweb            80   Serves HTTP requests for LAN-local clients
#    lanwebsecure     443   Serves HTTPS requests for LAN-local clients. Self-signed certificate.
#    landashboard    8080   Serves the traefik dashboard on LAN-local http://<any-hostname>:8080.  Requires HTTP basic authentication.
#    portainerui     9000   Serves the Portainer UI on LAN-local http://<any-hostname>:9000.  Requires Portainer integrated authentication.
#
# Externally, this stack serves:
#    http://${TRAEFIK_DNS_NAME}                      Traefik Dashboard (private LAN only)
#    http://<any-host-name>:8080                     Traefik Dashboard (private LAN only)
#    https://${TRAEFIK_DNS_NAME}                     Traefik Dashboard (private LAN only)
#    http(s)://${SHARED_APP_DNS_NAME}                Shared app (public internet and private LAN).  Redirects to ${SHARED_APP_DEFAULT_PATH}
#    http://${SHARED_LAN_APP_DNS_NAME}               Shared app (private LAN only).  Redirects to ${SHARED_LAN_APP_DEFAULT_PATH}
#
#
# Prerequisites:
#   Prerequisites common to all stacks (only done once when traefik is initially set up):
#     * A ${PARENT_DNS_DOMAIN} has been created, and NS records are pointing at a nameserver managed by cloudflare.
#     * A cloudflared tunnel has been created, configured and started on this hub host to forward all HTTP and HTTPS
#       requests on "*.${PARENT_DNS_DOMAIN}" to http://localhost:7082 on this host.
#     * A wildcard DNS entry for "*.${PARENT_DNS_DOMAIN}" has been created on cloudflare DNS to proxy all requests to the tunnel
#       mentioned above.
#     * A persistent docker network "traefik" has been created before launching. This network is used by traefik to proxy requests to
#       backend service containers
services:
  traefik:
    # The traefik reverse-proxy (including dashboard).
    #
    #  Configured to:
    #
    #    Use docker network "traefik" for backend connections to services behind the reverse-proxy
    #    Use lets-encrypt to automatically issue and renew SSL certificates. Persistence of lets-encrypt
    #      certificate state is kept in docker volume "traefik_acme", which should never be deleted.
    #    Serve public http(s):// on port 7082 (entrypoint "web").  This is proxied traffic from cloudflare tunnel.
    #    Serve private (internal LAN only) http:// on port 80 (entrypoint "lanweb"). This port should NOT be exposed to the internet 
    #    Serve private (internal LAN only) https:// on port 443 (entrypoint "lansecureweb"). A self-signed certificate
    #      is used (not a valid certificate). This port should NOT be exposed to the internet.
    #    Serve a password-authenticated Traefik dashboard on http://${TRAEFIK_DNS_NAME}, https://${TRAEFIK_DNS_NAME},
    #      and "http://<any-hostname>:8080", all for internal LAN only.
    #
    container_name: "traefik"
    image: "traefik:v${TRAEFIK_VERSION:-2.10.4}"
    restart: always
    command:
      - "--configFile=/etc/traefik/traefik.yml"

    ports:
      - "127.0.0.1:7082:7082"
                      # Endpoint "websecure"    -- Public HTTP and HTTPS (exposed to internet on ports 80 and 443 through cloudflare tunnel proxy.
                      #                            HTTPS terminated by cloudflare and proxied as HTTP. Middleware ensures X-Forwarded-For and
                      #                            X-Forwarded-Proto are set appropriately. This port is locked down to localhost since it is
                      #                            only used by the cloudflare tunnel proxy on this host.

      - "80:80"       # Endpoint "lanweb"       -- Private http (exposed only to LAN)
      - "443:443"     # Endpoint "lanwebsecure" -- Private https (exposed only to LAN). Self-signed SSL certificate.
      - "8080:8080"   # Endpoint "landashboard" -- Private http (exposed only to LAN) on port 8080. Serves only the Traefik dashboard,
                      #                            with basic authentication middleware.
      - "9000:9000"   # Endpoint "portainerui"  -- Private http (exposed only to LAN) on port 9000. Serves only the Portainer UI, with
                      #                            its own database-driven authentication.
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "traefik_acme:/acme"
      - "./traefik-config.yml:/etc/traefik/traefik.yml:ro"
      - "./traefik-dynamic-config.yml:/etc/traefik/traefik-dynamic.yml:ro"
    labels:
      # The labels here on the main traefik container allow us to add dynamic reverse-proxy
      # configuration for the Traefik dashboard, as if it were launched separately. When
      # Traefik starts up, it will see these labels on its own container and add the
      # corresponding configuration to its dynamic configuration.
      - "traefik.enable=true"

      # A middleware that imposes HTTP basic authentication on any route that uses it.
      # The accepted usernames/passwords are specified as a comma-delimited list of
      # hash strings in TRAEFIK_HTPASSWD, each of which is compatible with the output of
      # `htpasswd -nB <username>`.
      # Note that the hash string may contain dollar-signs, so if it is specified in a docker-compose.yml
      # file, each dollar-sign must be doubled to escape it. This escaping is done automatically
      # when an environment variable is expanded by docker-compose, so there is no need
      # to escape the value of TRAEFIK_HTPASSWD.
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_HTPASSWD}"

      # A middleware that will redirect http(s)://<host-and-port>/ (root path only) to http(s)://<host-and-port>/${SHARED_APP_DEFAULT_PATH}/
      - "traefik.http.middlewares.traefik-shared-app-default-path.redirectregex.regex=^(https?)://([^/]*)(/?)$$"
      - "traefik.http.middlewares.traefik-shared-app-default-path.redirectregex.replacement=$${1}://$${2}${SHARED_APP_DEFAULT_PATH}$${3}"

      # A middleware that will redirect http(s)://<host-and-port>/ (root path only) to http(s)://<host-and-port>/${SHARED_LAN_APP_DEFAULT_PATH}/
      - "traefik.http.middlewares.traefik-shared-lan-app-default-path.redirectregex.regex=^(https?)://([^/]*)(/?)$$"
      - "traefik.http.middlewares.traefik-shared-lan-app-default-path.redirectregex.replacement=$${1}://$${2}${SHARED_LAN_APP_DEFAULT_PATH}$${3}"

      # -----------------------------------------
      # A router for https://{TRAEFIK_DNS_NAME}
      # that only responds to LAN-local requests, and requires HTTP basic authentication.
      - "traefik.http.routers.traefik.entrypoints=lanwebsecure"
      - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DNS_NAME}`) && (Path(`/`) || PathPrefix(`/api`,`/dashboard`))"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=traefik-auth"
      # -----------------------------------------
      # A router for http://${TRAEFIK_DNS_NAME} that redirects to https, on the LAN-local entrypoint.
      - "traefik.http.routers.traefik-redirect.entrypoints=lanweb"
      - "traefik.http.routers.traefik-redirect.rule=Host(`${TRAEFIK_DNS_NAME}`)"
      - "traefik.http.routers.traefik-redirect.service=api@internal"
      - "traefik.http.routers.traefik-redirect.middlewares=traefik-redirect-https"
      - "traefik.http.middlewares.traefik-redirect-https.redirectscheme.scheme=https"
      # -----------------------------------------
      # A router for http://<any-hostname>:8080 that routes directly to the dashboard, and requires HTTP basic authentication.
      # LAN-local only.
      - "traefik.http.routers.traefik-http-private-8080.entrypoints=landashboard"
      - "traefik.http.routers.traefik-http-private-8080.rule=Path(`/`) || PathPrefix(`/api`,`/dashboard`)"
      - "traefik.http.routers.traefik-http-private-8080.service=api@internal"
      - "traefik.http.routers.traefik-http-private-8080.middlewares=traefik-auth"
      # -----------------------------------------
      # A router for https://${SHARED_APP_DNS_NAME}/ (root path only) on the public internet entrypoint, which redirects to default app
      - "traefik.http.routers.traefik-https-shared-public-default-path.entrypoints=websecure"
      - "traefik.http.routers.traefik-https-shared-public-default-path.rule=${SHARED_APP_HTTPS_HOST_RULE} && Path(`/`)"
      - "traefik.http.routers.traefik-https-shared-public-default-path.service=api@internal"
      # redirect root path ('/') to default app path
      - "traefik.http.routers.traefik-https-shared-public-default-path.middlewares=traefik-shared-app-default-path"
      # -----------------------------------------
       # A router for https://${SHARED_LAN_APP_DNS_NAME}/ (root path only) on the local LAN only -- redirect to default app path
      - "traefik.http.routers.traefik-https-shared-private-default-path.entrypoints=lanwebsecure"
      - "traefik.http.routers.traefik-https-shared-private-default-path.rule=${SHARED_LAN_APP_HTTPS_HOST_RULE} && Path(`/`)"
      - "traefik.http.routers.traefik-https-shared-private-default-path.service=api@internal"
      # redirect root path ('/') to default app path
      - "traefik.http.routers.traefik-https-shared-private-default-path.middlewares=traefik-shared-lan-app-default-path"
      # -----------------------------------------
      # A router for http://<common-LAN-hostnames>/ (root path only) on the local LAN entrypoint -- redirect to default app path
      - "traefik.http.routers.traefik-http-shared-private-default-path.entrypoints=lanweb"
      - "traefik.http.routers.traefik-http-shared-private-default-path.rule=${SHARED_LAN_APP_HTTP_HOST_RULE} && Path(`/`)"
      - "traefik.http.routers.traefik-http-shared-private-default-path.service=api@internal"
      # strip /traefik prefix before forwarding to dashboard. leave /api prefix intact; those urls are generated by dashboard
      - "traefik.http.routers.traefik-http-shared-private-default-path.middlewares=traefik-shared-lan-app-default-path"
      # -----------------------------------------

    networks:
      - traefik

  shared_app_static:
    # A simple static webserver for static content common to all public shared apps. In particular, this
    # serves a favicon.ico file that is used by all shared apps.
    image: "joseluisq/static-web-server"    # an efficient static webserver on port 80
    volumes:
      - "./shared_app_static:/public"          # serve static files from ./shared_app_static
    networks:
      - traefik                # The network through which traefik forwards requests to our service
    restart: always            # This container will be restarted when this host reboots or docker is restarted
    labels:
      - "traefik.enable=true"   # tells traefik that this container should be reverse-proxied

      # -----------------------------------------
      # A router for http(s)://${SHARED_APP_DNS_NAME}/favicon.ico, on the public internet entrypoint
      - "traefik.http.routers.shared-app-static-public-https-favicon.entrypoints=websecure"
      #- "traefik.http.routers.shared-app-static-public-https-favicon.tls.certresolver=${SHARED_APP_CERT_RESOLVER}"
      - "traefik.http.routers.shared-app-static-public-https-favicon.rule=${SHARED_APP_HTTPS_HOST_RULE} && Path(`/favicon.ico`)"

  shared_lan_app_static:
    # A simple static webserver for static content common to all private shared apps. In particular, this
    # serves a favicon.ico file that is used by all private shared apps.
    image: "joseluisq/static-web-server"    # an efficient static webserver on port 80
    volumes:
      - "./shared_lan_app_static:/public"          # serve static files from ./shared_app_static
    networks:
      - traefik                # The network through which traefik forwards requests to our service
    restart: always            # This container will be restarted when this host reboots or docker is restarted
    labels:
      - "traefik.enable=true"   # tells traefik that this container should be reverse-proxied

      # -----------------------------------------
      # A router for http://<common-lan-local-hostname>/favicon.ico, on the private entrypoint
      - "traefik.http.routers.shared-lan-app-static-http-favicon.entrypoints=lanweb"
      - "traefik.http.routers.shared-lan-app-static-http-favicon.rule=${SHARED_LAN_APP_HTTP_HOST_RULE} && Path(`/favicon.ico`)"
      # -----------------------------------------
      # A router for https://${SHARED_LAN_APP_DNS_NAME}/favicon.ico, on the local LAN entrypoint only
      - "traefik.http.routers.shared-lan-app-static-https-favicon.entrypoints=lanwebsecure"
      - "traefik.http.routers.shared-lan-app-static-https-favicon.rule=${SHARED_LAN_APP_HTTPS_HOST_RULE} && Path(`/favicon.ico`)"
      # -----------------------------------------


networks:
  traefik:
    # The backend network used for reverse-proxy request forwarding. All containers
    # that provide HTTP services behind the traefik reverse-proxy should be placed in
    # this network (normally serving on port 80). It is not necessary for containers
    # behind the reverse-proxy to expose their HTTP port to the host.
    external: true

volumes:
  traefik_acme:
    # Volume that contains acme.json, cached issued certificates from lets-encrypt
    # It is very important that this data is not deleted and survives rebuild/restart
    # of traefik; lets-encrypt will block you for a period of time if you request
    # reissuance of certificates that are not due for renewal.
    external:
      true
