#!/usr/bin/env python3

import os
import sys
import dotenv
import argparse
import json
import ndjson

from typing import Dict, List

from hub_util import (
    Jsonable, JsonableDict, JsonableList,
    install_docker,
    docker_is_installed,
    install_docker_compose,
    docker_compose_is_installed,
    docker_call,
    get_docker_networks,
    get_docker_volumes,
    should_run_with_group,
  )

def main() -> int:
    parser = argparse.ArgumentParser(description="Install prerequisites for this project")
    parser.add_argument("--force", "-f", action="store_true", help="Force clean installation of prerequisites")

    args = parser.parse_args()

    force: bool = args.force

    username = os.environ["USER"]

    # Install docker
    if not docker_is_installed() or args.force:
        install_docker(force=force)

    # Install docker-compose
    if not docker_compose_is_installed() or args.force:
        install_docker_compose(force=force)

    # Create the "traefik" network if it doesn't exist:
    docker_networks = get_docker_networks()
    if "traefik" not in docker_networks:
        docker_call(["network", "create", "traefik"])

    # Create The "traefik_acme" volume if it doesn't exist:
    docker_volumes = get_docker_volumes()
    if "traefik_acme" not in docker_volumes:
        docker_call(["volume", "create", "traefik_acme"])

    # Create the "portainer_data" volume if it doesn't exist:
    if "portainer_data" not in docker_volumes:
        docker_call(["volume", "create", "portainer_data"])

    if should_run_with_group("docker"):
        print("\nWARNING: docker and docker-compose require membership in OS group 'docker', which was newly added for", file=sys.stderr)
        print(f"user \"{username}\", and is not yet effective for the current login session. Please logout", file=sys.stderr)
        print("and log in again, or in the mean time run docker with:\n", file=sys.stderr)
        print(f"      sudo -E -u {username} docker [<arg>...]", file=sys.stderr)

    print("\nPrerequisites installed successfully", file=sys.stderr)


if __name__ == "__main__":
    rc = main()
    sys.exit(rc)