#!/bin/bash

# Activates the project environment.

# meant to be sourced (updates environment variables), but can also be run as
# a standalone script to create the virtualenv if it does not exist.
# If run as a standalone script and arguments are supplied; runs the
# arguments as a commandline within the activated environment.
# If run as a standalone shell with no arguments, bash is run inside the environment

#   - creates a python virtualenv if necessary and activates it.
#   - adds <project>/bin directory to PATH
#   - adds <project>/bin/env-bin to PATH
#   - adds <project>/bin/python to PYTHONPATH
#   - exports PROJECT_DIR.

_SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
PROJECT_DIR="$(dirname "$_SCRIPT_DIR")"
_BUILD_DIR="$PROJECT_DIR/build"
_VENV="$_BUILD_DIR/.venv"
_ABORT=
_OLD_PS1="$PS1"

# detect if we are being sourced
(return 0 2>/dev/null) && _SOURCED=1 || _sourced=

if [ -z "$_SOURCED" ]; then
  # running as a standalone script (not sourced). Errors should abort the script
  set -e
fi

# add "$HOME/.local/bin" to the PATH
if [ ":$PATH:" != *":$HOME/.local/bin:"* ]; then
  PATH="$HOME/.local/bin:$PATH"
fi

# create virtualenv if it does not exist
if [ ! -d "$_VENV" ]; then
  "$_SCRIPT_DIR/create-venv" || _ABORT=$?
fi

if [ -z "$_ABORT" ]; then
  if [ -z "$_SOURCED" ]; then
    if [ -z "$1" ]; then
      # No arguments -- run a child bash shell and source this script into it
      # This trick allows environment attributes that are not passed to child processes
      # (like the prompt string) to be initialized in the interactive child shell.
      # Note that when we use --init-file we are replacing ~/.bashrc so we have to source
      # it as well.
      echo "Launching hub-env bash shell..." >&2
      bash --init-file <(echo ". \"$HOME/.bashrc\"; . \"$_SCRIPT_DIR/hub-env\"") || exit $?
      exit 0
    fi
  fi

  export PROJECT_DIR

  # add project bin dir to path
  if [ ":$PATH:" != *":$_SCRIPT_DIR:"* ]; then
    PATH="$_SCRIPT_DIR:$PATH"
  fi

  # add project env-bin dir to path
  if [ ":$PATH:" != *":$_SCRIPT_DIR/env-bin:"* ]; then
    PATH="$_SCRIPT_DIR/env-bin:$PATH"
  fi

  # Activate the python virtualenv. This adds .venv/bin to PATH and exports PYTHON_VIRTUALENV
  # If we have installed a hacky activate stub, then we want to invoke the
  # ORIGINAL activate script
  if [ -f "$_VENV/bin/orig_activate" ]; then
    . "$_VENV/bin/orig_activate" || _ABORT=$?
  else
    . "$_VENV/bin/activate" || _ABORT=$?
  fi
fi

if [ -z "$_ABORT" ]; then
  # add python dir to PYTHONPATH
  if [ -z "$PYTHONPATH" ]; then
    export PYTHONPATH="$_SCRIPT_DIR/python"
  else
    if [ ":$PYTHONPATH:" != *":$_SCRIPT_DIR/python:"* ]; then
      export PYTHONPATH="$_SCRIPT_DIR/python:$PYTHONPATH"
    fi
  fi

  # Create a custom prompt string
  # If you like, you can put code in .bashrc to restore PS1 to "$STICKY_PS1" if it is set.
  export STICKY_PS1="(hub-env) $_OLD_PS1"
  PS1="$STICKY_PS1"
fi


if [ -z "$_ABORT" ]; then
  if [ -z "$_SOURCED" ]; then
    # We are not being sourced and arguments were provided.  Run them as a command
    "$@" || exit $?
  fi
fi

if [ -n "$_ABORT" ]; then
  echo "ERROR: hub-env did not initialize successfully!" >&2
  if [ -z "$_SOURCED" ]; then
    exit "$_ABORT"
  fi
fi

unset _OLD_PS1
unset _ABORT
unset _VENV
unset _BUILD_DIR
unset _SOURCED
unset _SCRIPT_DIR
