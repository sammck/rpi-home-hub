version: "3.3"

# docker-compose.yml configuration for a Traefik reverse-proxy with dashboard.
#
#  Environment Variables:
#    TRAEFIK_DNS_DOMAIN       A registered public DNS domain that you control; e.g., "obama-family-home.com"
#                             The dashboard will use certificate for traefik.${TRAEFIK_DNS_DOMAIN}
#    LETSENCRYPT_OWNER_EMAIL  The email address to associate with issued lets-encrypt certificataes
#    TRAEFIK_HTPASSWD         A comma-delimited list of username/hashed password values in the format
#                             generated by `htpasswd`, but with any dollar-sign characters doubled
#                             to prevent them from being interpreted as macros by docker-compose.
#                             The usernames and associated passwords in this list will be
#                             able to access the Traefik dashboard.
#                                Example:
#                                   echo $(htpasswd -nBb admin S3cretPa55w0rd) | sed -e s/\\$/\\$\\$/g
#
# Entrypoints:
#    This stack creates a Traefik reverse-proxy with 4 entrypoints:
#
#    Entrypoint      Port   Description
#    ----------      ----   ---------------------------------
#    web             7080   Intended to serve public HTTP requests; public port 80 on the network's gateway
#                             router should be port-forwarded to this port. Also used to serve challenge
#                             requests from lets-encrypt to verify ownership of domain names.
#    websecure       7443   Intended to serve public HTTPS requests; public port 443 on the network's gateway
#                             router should be port-forwarded to this port.
#    lanweb            80   Serves HTTP requests for LAN-local clients
#    lanwebsecure     443   Serves HTTPS requests for LAN-local clients. to be used without certificate errors,
#                             A public DNS name must resolve externally to this network's public IP address,
#                             but must resolve within the LAN to this host's LAN IP address. This can be done
#                             by putting the LAN IP address in each client's /etc/hosts, or by hosting
#                             a LAN-local DNS server that overrides the public entries.
# Externally, this stack serves:
#    http://traefik.${TRAEFIK_DNS_DOMAIN}            Dashboard (private LAN only)
#    https://traefik.${TRAEFIK.DNS_DOMAIN}           Dashboard (private LAN only)
#    http://<any-hostname>/traefik                   Dashboard (private LAN only)
#
#
# Prerequisites:
#   Prerequisites common to all stacks (only done once when traefik is initially set up):
#     * A DNS entry with a stable name (e.g., home.${TRAEFIK_DNS_DOMAIN}) has been configured to resolve to the current public IP address
#       of your network's gateway router. Since typical residential ISPs may change your public IP address periodically, it is
#       usually necessary to involve Dynamic DNS (DDNS) to make this work. Some gateway routers (e.g., eero) have DDNS support built-in.
#       Your DDNS provider will provide you with an obscure but unique and stable (as long as you stay with the DDNS provider)
#       DNS name for your gateway's public IP address; e.g., "g1234567.eero.online". You should then create a CNAME entry for
#       home.{TRAEFIK_DNS_DOMAIN} that points at the obscure DDNS name. That makes an easy-to-remember DNS name for your network's public IP
#       address, and ensures that if your DDNS obscure name ever changes, you will only have to update this one CNAME record
#       to be back in business.  
#     * A DNS CNAME entry has been created for traefik.${TRAEFIK_DNS_DOMAIN} that resolves to home.${TRAEFIK_TRAEFIK_DNS_DOMAIN} (see above)
#       You must create a DNS entry for traefik.${TRAEFIK_DNS_DOMAIN} that resolves to your gateway router's public IP address
#       *before* starting this stack. If you do not, lets-encrypt will be unable to validate the certificate request,
#       and will eventually throttle you for a week at a time.
#     * Your network's gateway router must be configured to forward public ports 80 and 443 to this host on alternate destination ports
#       ports, as 80->7080 and 443->7443. Alternate ports are required because ports 80 and 443 on this host are used to serve
#       LAN-local (non-nternet) requests and must not be exposed to the internet. This must be done *before* starting this stack.
#       If you do not, lets-encrypt will be unable to validate the certificate request, and will eventually throttle you for a
#       week at a time.
#     * A persistent docker network "traefik" has been created before launching. This network is used by traefik to proxy requests to
#       backend service containers
#     * A persistent docker volume "traefik_acme" has been created before launching. This volume will contain cached issued
#       certificates from lets-encrypt it is very important that this data is not deleted and survives rebuild/restart
#       of traefik; lets-encrypt will block you for a period of time if you request reissuance of certificates that are not due for renewal.
services:

  traefik:
    # The traefik reverse proxy (includiong dashboard).
    #
    #  Configured to:
    #
    #    Use docker network "traefik" for backend connections to services behind the reverse-proxy
    #    Use lets-encrypt to automatically issue and renew SSL certificates. Persistence of lets-encrypt
    #      certificate state is kept in docker volume "traefik_acme", which should never be deleted.
    #    Serve public http:// on port 7080 (entrypoint "web").  This is port-forwarded to this host from my home's public IP
    #      address (on port 80) via eero port forwarding. This port is also used by lets-encrypt to verify that I have ownership of
    #      the server behind a DNS name when a new SSL certificate is issued.
    #    Serve public https:// on port 7443 (entrypoint "websecure"). This is port-forwarded to this host from my home's public IP
    #      address (on port 443) via eero port forwarding. Each hostname routed to this entrypoint is included in the SSL certificate(s) created
    #      by lets-encrypt. The Host rule's hostname MUST have a record in DNS that resolves to my home's public IP address before
    #      a valid SSL certificate can be created.
    #    Serve private (internal LAN only) http:// on port 80 (entrypoint "lanweb"). This port should NOT be exposed to the internet 
    #    Serve private (internal LAN only) https:// on port 443 (entrypoint "lansecureweb"). A self-signed certificate
    #      is used (not a valid certificate). This port should NOT be exposed to the internet.
    #    Serve a password-authenticated Traefik dashboard on http://traefik.${TRAEFIK_DNS_DOMAIN}, https://traefik.${TRAEFIK_DNS_DOMAIN},
    #      and "http://<any-hostname>/traefik", all for internal LAN only.
    #
    container_name: "traefik"
    image: "traefik:v2.10"
    restart: always
    command:
      - "--log.level=DEBUG"
      - "--accesslog=true"
      - "--api.dashboard=true"                       # Run a traefik dashboard on http://<this-host>:8080
      # - "--api.insecure=true"                        # dashboard is unsecured http
      - "--api.debug=true"
      - "--providers.docker=true"                    # Monitor docker container creation and automatically reverse-proxy to configured containers
      - "--providers.docker.network=traefik"         # Connect to proxied backend service containers through the "traefik" docker network. This ensures that
                                                     # there will be an IP route to the container's IP address if the container is on multiple
                                                     # networks.  Without it, traefik may pick an IP address of the container that is on another
                                                     # docker network which is not reachable from traefik's container.
      - "--providers.docker.exposedbydefault=false"  # require a "traefik.enable=true" label on containers behind reverse-proxy
      - "--entrypoints.web.address=:80"              # Public http:// entrypoint
      # Following 2 lines will auto-redirect all HTTP on 80 to https on 443 for all routers.
      # Should only be used if no containers will ever serve http directly."
      # - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      # - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.websecure.address=:443"                                 # Public https:// entrypoint
      - "--entrypoints.websecure.http.tls.certResolver=myresolver"             # port 443 uses lets-encrypt ACME tls resolver
      - "--certificatesresolvers.myresolver.acme.email=${LETSENCRYPT_OWNER_EMAIL}"
                                                                               # tell lets-encrypt who owns the DNS domain
      - "--certificatesresolvers.myresolver.acme.storage=/acme/acme.json"      # ACME state must be preserved so we put it in a Docker volume
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"           # Use HTTP challenge protocol to verify ownership to lets-encrypt.
                                                                               #    lets-encrypt will send a challenge to http:<dns-name>:80/..."
                                                                               #    and traefik will respond with credentials. Then the cert will be issued.
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web" # Use PUBLIC port 80 for ACME http challenges
      - "--entrypoints.lanweb.address=:8480"                                   # Private LAN-only http:// entrypoint. Exposed to LAN on port 80.
      - "--entrypoints.lanwebsecure.address=:8443"                             # Private https:// entrypoint. Exposed to LAN on port 443
      - "--entrypoints.lanwebsecure.http.tls.certResolver=myresolver"          # port 8443 uses a separate tls resolver
      - "--certificatesresolvers.lanresolver.acme.email=${LETSENCRYPT_OWNER_EMAIL}"
      - "--certificatesresolvers.lanresolver.acme.storage=/acme/lanacme.json"  # ACME state must be preserved so we put it in a Docker volume
      - "--certificatesresolvers.lanresolver.acme.httpchallenge=true"          # Use HTTP challenge protocol to verify ownership of private domains to lets-encrypt.
                                                                               #    lets-encrypt will send a challenge to http:<dns-name>:80/..."
                                                                               #    and traefik will respond with credentials. Then the cert will be issued.
      - "--certificatesresolvers.lanresolver.acme.httpchallenge.entrypoint=web" # Use PUBLIC port 80 for ACME http challenges even for private domains. For this
                                                                               #   to work, there must be a public DNS record that resolves to my home IP address.
                                                                               #   The host won't be reachable through the internet though, so clients will have
                                                                               #   to have the local LAN IP address of this host in their /etc/hosts, or have
                                                                               #   a LAN-local DNS server that gives the local IP address

      - "--experimental.plugins.trauth.moduleName=github.com/leonjza/trauth"   # An authentication plugin that uses HTTP BasicAuth once, then stores a cookie
                                                                               # can be used for simple website authentication that avoids repeated reauthentication.
      - "--experimental.plugins.trauth.version=v1.4.3"
    ports:
      - "7080:80"     # Endpoint "web" -- Public http (exposed to internet on port 80 through eero port forwarding)
      - "7443:443"    # Endpoint "secureweb" -- Public https (exposed to internet on port 443 through eero port forwarding)
      - "80:8480"     # Endpoint "lanweb" -- Private http (exposed only to LAN)
      - "443:8443"    # Endpoint "lanwebsecure" -- Private https (exposed only to LAN). self-signed SSL certificate.
      - "8080:8080"   # Traefik http://<this-host>:8080/ dashboard. Insecure--do NOT expose to internet
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "traefik_acme:/acme"
    labels:
      # The labels here on the main traefik container allow us to add dynamic reverse-proxy
      # configuration for the Traefik dashboard, as if it were launched separately.
      - "traefik.enable=true"

      # A router for https://traefik.${TRAEFIK_DNS_DOMAIN} and http://traefik.${TRAEFIK_DNS_DOMAIN}
      # that only responds to LAN-local requests, and requires HTTP basic authentication.
      - "traefik.http.routers.traefik.entrypoints=lanweb,lanwebsecure"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${TRAEFIK_DNS_DOMAIN}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=traefik-auth"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_HTPASSWD}"

      # A router for http://<any-hostname>/traefik that only responds to LAN-local requests,
      # and requires HTTP basic authentication.
      - "traefik.http.routers.traefik-path.entrypoints=lanweb"
      - "traefik.http.routers.traefik-path.rule=PathPrefix(`/traefik`)"
      # Following 2 lines strip off the /traefik prefix before forwarding to the dashboard service
      - "traefik.http.routers.traefik-path.middlewares=traefik-prefix"
      - "traefik.http.middlewares.traefik-prefix.stripPrefix.prefixes=/traefik"
      - "traefik.http.routers.traefik-prefix.service=api@internal"
      - "traefik.http.routers.traefik-prefix.middlewares=traefik-auth"

    networks:
      - traefik

networks:
  traefik:
    # The backend network used for reverse-proxy request forwarding. All containers
    # that provide HTTP services behind the traefik reverse-proxy should be placed in
    # this network (normally serving on port 80). It is not necessary for containers
    # behind the reverse-proxy to expose their HTTP port to the host.
    external: true

volumes:
  traefik_acme:
    # Volume that contains acme.json, cached issued certificates from lets-encrypt
    # It is very important that this data is not deleted and survives rebuild/restart
    # of traefik; lets-encrypt will block you for a period of time if you request
    # reissuance of certificates that are not due for renewal.
    external: true
